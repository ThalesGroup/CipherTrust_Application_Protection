jenkins:
  systemMessage: "Automated Jenkins Setup"
  numExecutors: 2
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "ChangeIt01!"
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Overall/Administer:authenticated"
        - "Overall/Read:anonymous"
        - "Job/Read:anonymous"
        - "Job/Build:anonymous"
unclassified:
  gitLabConnectionConfig:
    connections:
      - name: "GitLab"
        url: "http://gitlab"
        apiTokenId: "gitlab-api-token"
        clientBuilderId: "autodetect"
        ignoreCertificateErrors: true
        connectionTimeout: 10
        readTimeout: 10

jobs:
  - script: >
      pipelineJob('Deploy_Sample_App_ADP') {
        parameters {
          stringParam("GIT_REPO_UI", "http://gitlab:80/root/crestline-ui.git", "URL of the Crestline UI Git repository")
          stringParam("GIT_REPO_API", "http://gitlab:80/root/crestline-api.git", "URL of the Crestline API Git repository")
          stringParam("GIT_REPO_DEP", "http://gitlab:80/root/crestline-deployment.git", "URL of the Crestline Deployment Git repository")
          stringParam("DOCKER_REGISTRY", "registry:5000", "URL of the Docker registry")
          stringParam("API_SERVER_IP", "${API_SERVER_IP}", "URL of the API Server")
          stringParam("DATASOURCE_URL", "jdbc:postgresql://postgres-service.app-stack.svc.cluster.local:5432/cdsp", "Connection string for DB")
          stringParam("DATASOURCE_USERNAME", "postgres", "Username for the DB")
          stringParam("DATASOURCE_PASSWORD", "ChangeIt01!", "Password for the DB")
        }
        definition {
          cpsScm {
            scm {
              git {
                remote { 
                  url('http://gitlab:80/root/crestline-deployment.git')
                  credentials('gitlab-credentials')
                }
                branch('main')
              }
            }
            scriptPath('Jenkinsfile')
            lightweight(true)
          }
        }
        triggers {
          gitlabPush {
            buildOnPushEvents(true)
            buildOnMergeRequestEvents(false)
            enableCiSkip(false)
            setBuildDescription(true)
          }
        }
      }

credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: gitlab-credentials
              username: root
              password: "ChangeIt01!"
          - string:
              scope: GLOBAL
              id: "gitlab-api-token"
              secret: "${GITLAB_PERSONAL_ACCESS_TOKEN}"
          - file:
              scope: GLOBAL
              id: "docker-desktop-kubeconf"
              description: "Kube config for Docker Desktop"
              fileName: "kubeconfig"
              secretBytes: "${KUBECONFIG_BASE64}"
          - file:
              scope: GLOBAL
              id: "jenkins-serviceaccount-kubeconfig"
              description: "Kube config for Docker Desktop"
              fileName: "jenkins-sa-kubeconfig.yaml"
              secretBytes: "${KUBECONFIG_SA_BASE64}"