pipeline {
    agent any

    // Define parameters
    parameters {
        string(name: 'GIT_REPO_UI', defaultValue: 'http://gitlab:80/root/crestline-ui.git', description: 'URL of the Crestline UI Git repository')
        string(name: 'GIT_REPO_API', defaultValue: 'http://gitlab:80/root/crestline-api.git', description: 'URL of the Crestline API Git repository')
        string(name: 'GIT_REPO_DEP', defaultValue: 'http://gitlab:80/root/crestline-deployment.git', description: 'URL of the Crestline Deployment Git repository')
        string(name: 'DOCKER_REGISTRY', defaultValue: 'registry:5000', description: 'URL of the Docker registry')
        string(name: 'API_SERVER_IP', defaultValue: '192.168.2.221', description: 'URL of the API Server')
        string(name: 'DATASOURCE_URL', defaultValue: 'jdbc:postgresql://postgres-service.app-stack.svc.cluster.local:5432/cdsp', description: 'Connection string for DB')
        string(name: 'DATASOURCE_USERNAME', defaultValue: 'postgres', description: 'Username for the DB')
        string(name: 'DATASOURCE_PASSWORD', defaultValue: 'ChangeIt01!', description: 'Password for the DB')
    }

    environment {
        // Use the parameters in the environment
        GIT_REPO_UI = "${params.GIT_REPO_UI}"
        GIT_REPO_API = "${params.GIT_REPO_API}"
        GIT_REPO_DEP = "${params.GIT_REPO_DEP}"
        DOCKER_REGISTRY = "${params.DOCKER_REGISTRY}"
        API_SERVER_IP = "${params.API_SERVER_IP}"
        DATASOURCE_URL = "${params.DATASOURCE_URL}"
        DATASOURCE_USERNAME = "${params.DATASOURCE_USERNAME}"
        DATASOURCE_PASSWORD = "${params.DATASOURCE_PASSWORD}"
        KUBE_CONFIG_TEST = '/var/jenkins_home/kubeconfig-test'
        KUBE_CONFIG_PROD = '/var/jenkins_home/kubeconfig-prod'
    }

    stages {
        stage('Configure Git Safe Directory') {
            steps {
                script {
                    // Add the workspace directory to Git's safe directory list
                    sh 'git config --global --add safe.directory /var/jenkins_home/workspace/Deploy_Sample_App_ADP/crestline-ui'
                    sh 'git config --global --add safe.directory /var/jenkins_home/workspace/Deploy_Sample_App_ADP/crestline-api'
                    sh 'git config --global --add safe.directory /var/jenkins_home/workspace/Deploy_Sample_App_ADP/crestline-deployment'
                }
            }
        }
        stage('Checkout Code') {
            steps {
                script {
                    // Pull code from Git repositories into separate directories
                    dir('crestline-ui') {
                        git branch: 'main', url: "${env.GIT_REPO_UI}"
                    }
                    dir('crestline-api') {
                        git branch: 'main', url: "${env.GIT_REPO_API}"
                    }
                    dir('crestline-deployment') {
                        git branch: 'main', url: "${env.GIT_REPO_DEP}"
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh 'docker build -t registry:5000/crestline-ui:latest -f crestline-ui/Dockerfile ./crestline-ui'
                    sh 'docker build -t registry:5000/crestline-api:latest -f crestline-api/Dockerfile ./crestline-api'
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    sh '''
                        set -ex
                        echo "==> Checking Registry Reachability"
                        curl -k https://registry:5000/v2/

                        echo "==> Pushing crestline-ui"
                        docker push registry:5000/crestline-ui:latest

                        echo "==> Pushing crestline-api"
                        docker push registry:5000/crestline-api:latest
                    '''
                }
            }
        }

        stage('Test KubeConfig') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'jenkins-serviceaccount-kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                        withKubeConfig([kubeconfig: KUBECONFIG_FILE]) {
                            sh """
                            set -ex
                            kubectl config current-context
                            kubectl get nodes
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Test Kubernetes Environment') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'docker-desktop-kubeconf', kubeconfigFile: "${KUBE_CONFIG_TEST}"]) {
                        sh """
                            set -ex
                            sed -i 's|DOCKER_REGISTRY|'"${DOCKER_REGISTRY}"'|g' crestline-deployment/app-deployment.yaml
                            sed -i 's|API_SERVER_IP|'"${API_SERVER_IP}"'|g' crestline-deployment/app-deployment.yaml
                            sed -i 's|DATASOURCE_URL_VAR|'"${DATASOURCE_URL}"'|g' crestline-deployment/app-deployment.yaml
                            sed -i 's|DATASOURCE_USERNAME_VAR|'"${DATASOURCE_USERNAME}"'|g' crestline-deployment/app-deployment.yaml
                            sed -i 's|DATASOURCE_PASSWORD_VAR|'"${DATASOURCE_PASSWORD}"'|g' crestline-deployment/app-deployment.yaml
                            sh 'kubectl apply -f crestline-deployment/app-deployment.yaml --validate=false'
                        """                        
                    }
                }
            }
        }

        stage('Manual Verification') {
            steps {
                input message: 'Verify the deployment in the test environment. Proceed to production?', ok: 'Deploy to Production'
            }
        }

        stage('Deploy to Production Kubernetes Environment') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig-prod', kubeconfigFile: "${KUBE_CONFIG_PROD}"]) {
                        sh 'kubectl apply -f crestline-deployment/app-deployment.yaml'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}